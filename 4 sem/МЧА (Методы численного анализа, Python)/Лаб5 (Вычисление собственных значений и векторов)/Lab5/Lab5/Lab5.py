import numpy as np
import RotationMethod as RM

C = np.array([[0.2, 0, 0.2, 0, 0], 
              [0, 0.2, 0, 0.2, 0], 
              [0.2, 0, 0.2, 0, 0.2], 
              [0, 0.2, 0, 0.2, 0], 
              [0, 0, 0.2, 0, 0.2]])
D = np.array([[2.33, 0.81, 0.67, 0.92, -0.53], 
              [0.81, 2.33, 0.81, 0.67, 0.92], 
              [0.67, 0.81, 2.33, 0.81, 0.92], 
              [0.92, 0.67, 0.81, 2.33, -0.53], 
              [-0.53, 0.92, 0.92, -0.53, 2.33]])
k = 5
A = k * C + D
eps = 0.0001

# Тестовый пример 1
#A = np.array([[2.2, 1, 0.5, 2], 
#              [1, 1.3, 2, 1], 
#              [0.5, 2, 0.5, 1.6], 
#              [2, 1, 1.6, 2]])
# Тестовый пример 2
#A = np.array([[1, 3, 7], 
#              [3, 5, 2], 
#              [7, 2, 4]])


print(82 * "-")
print("|                                    Вариант 5                                   |")
print(82 * "-")
print("Матрица A:")
print(A)

# проверка матрицы на симметричность
for i in range(0, len(A)):
    for j in range(i + 1, len(A)):
        if (A[i][j] != A[j][i]):
            print("Матрица не симметрична")
            exit
print("\n\t Метод Якоби (вращений):")
print("\t~~~~~~~~~~~~~~~~~~~~~~~~\n")
RM.Method_Jacobi(A, eps)